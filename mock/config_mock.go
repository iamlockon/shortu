// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/model.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageConfig is a mock of StorageConfig interface.
type MockStorageConfig struct {
	ctrl     *gomock.Controller
	recorder *MockStorageConfigMockRecorder
}

// MockStorageConfigMockRecorder is the mock recorder for MockStorageConfig.
type MockStorageConfigMockRecorder struct {
	mock *MockStorageConfig
}

// NewMockStorageConfig creates a new mock instance.
func NewMockStorageConfig(ctrl *gomock.Controller) *MockStorageConfig {
	mock := &MockStorageConfig{ctrl: ctrl}
	mock.recorder = &MockStorageConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageConfig) EXPECT() *MockStorageConfigMockRecorder {
	return m.recorder
}

// GetConnStr mocks base method.
func (m *MockStorageConfig) GetConnStr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnStr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConnStr indicates an expected call of GetConnStr.
func (mr *MockStorageConfigMockRecorder) GetConnStr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnStr", reflect.TypeOf((*MockStorageConfig)(nil).GetConnStr))
}

// GetTimeout mocks base method.
func (m *MockStorageConfig) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockStorageConfigMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockStorageConfig)(nil).GetTimeout))
}
