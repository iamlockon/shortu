// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/model.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/iamlockon/shortu/internal/errors"
	pgxpool "github.com/jackc/pgx/v4/pgxpool"
)

// MockDBClient is a mock of DBClient interface.
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient.
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance.
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// GetConn mocks base method.
func (m *MockDBClient) GetConn(arg0 context.Context) (*pgxpool.Conn, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", arg0)
	ret0, _ := ret[0].(*pgxpool.Conn)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn.
func (mr *MockDBClientMockRecorder) GetConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockDBClient)(nil).GetConn), arg0)
}
